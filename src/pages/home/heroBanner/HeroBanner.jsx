import React, { useEffect, useState } from "react";
import { useNavigate } from "react-router-dom";
import { useSelector } from "react-redux";

// converted src of Img  to  toString() as getting error/warning of NaN

import "./style.scss";

import useFetch from "../../../hooks/useFetch";

import { Img } from "../../../components";
import { ContentWrapper } from "../../../components";

// import TypewriterComponent from "typewriter-effect";
import Typewriter from "typewriter-effect";

const useAnimatedText = (texts, delay, pause) => {
  const [animatedText, setAnimatedText] = useState(texts[0]);
  const [direction, setDirection] = useState("backward");
  const [textIndex, setTextIndex] = useState(0);
  const [paused, setPaused] = useState(false);

  useEffect(() => {
    const interval = setInterval(() => {
      if (!paused) {
        setAnimatedText((currentText) => {
          if (direction === "backward") {
            if (currentText.length > 0) {
              return currentText.slice(0, -1);
            } else {
              setDirection("forward");
              setTextIndex((currentIndex) => (currentIndex + 1) % texts.length);
              setPaused(true);
              setTimeout(() => setPaused(false), pause);
              return "";
            }
          } else {
            const nextText = texts[textIndex];
            if (currentText.length < nextText.length) {
              return nextText.slice(0, currentText.length + 1);
            } else {
              setDirection("backward");
              setPaused(true);
              setTimeout(() => setPaused(false), pause);
              return currentText;
            }
          }
        });
      }
    }, delay);
    return () => clearInterval(interval);
  }, [texts, delay, pause, direction, textIndex, paused]);

  return animatedText;
};
const HeroBanner = () => {
  const [background, setBackground] = useState("");
  const [query, setQuery] = useState("");

  const titleTexts = ["Welcome", "Enjoy", "MovieX"];
  const titleText = useAnimatedText(titleTexts, 200);

  const navigate = useNavigate();
  const { url } = useSelector((state) => state.home);

  const { data, loading } = useFetch("/movie/upcoming");

  // Link --->  https://developers.themoviedb.org/3/configuration/get-api-configuration  and Example =  https://image.tmdb.org/t/p/w500/8uO0gUM8aNqYLs1OsTBQiXu0fEv.jpg
  useEffect(() => {
    const bg =
      url.backdrop +
      data?.results?.[Math.floor(Math.random() * 20)]?.backdrop_path;
    setBackground(bg);
  }, [data]);

  const searchQueryHandler = (event) => {
    // when query length !== 0 and  user presses enter, as we are not using <form> and so not using onSubmit={searchQueryHandler}, thats why using it via DOM element
    if (event.key === "Enter" && query.length > 0) {
      navigate(`/search/${query}`);
    }
  };
  return (
    <div className="heroBanner">
      {/*  it also renders a child element with the `lazy-load-image-background` class in effect="blur" inside Img component.check inspect element in browser. This child element is generated by the library and it's used to display a placeholder background while the image is loading. */}
      {!loading && (
        <div className="backdrop-img">
          <Img src={background.toString()} />
        </div>
      )}

      {/* For merging/bridging between the Img and the rest of the heroBannerContent, to show blur gradient type effect between them */}
      <div className="opacity-layer"></div>

      <ContentWrapper>
        <div className="heroBannerContent">
          {/* <h1 className="title">{titleText}</h1> */}
          {/* <TypewriterComponent
            options={{
              strings: [
                "Chatbot.",
                "Photo Generation.",
                "Blog Writing.",
                "Mail Writing.",
              ],
              autoStart: true,
              loop: true,
              deleteSpeed: 10,
              delay: 10,
              pauseFor: 5000,
              preStringTyped: (arrayPos, self) => {
                self.el.classList.add("typewriter-blur");
              },
              onStringTyped: (arrayPos, self) => {
                self.el.classList.remove("typewriter-blur");
              },
            }}
          /> */}
          <h1 className="title_movie">
            <Typewriter
              options={{
                strings: [
                  '<span class="wel">Welcome</span>',
                  '<span class="mov">Movie</span>X',
                  '<span class="enj">Enjoy</span>ðŸ¥³',
                ],
                // strings: ["Welcome", "Enjoy ðŸ¥³", "MovieX"],
                autoStart: true,
                loop: true,
                deleteSpeed: 10,
                delay: 20, // 10
                pauseFor: 5000,
                cursor: "",
              }}
            />
          </h1>
          <span className="subTitle">
            Millions of movies, TV shows and people to discover. Explore now.
          </span>
          <div className="searchInput">
            <input
              type="text"
              placeholder="Search for a movie or tv show...."
              onChange={(e) => setQuery(e.target.value)}
              onKeyUp={searchQueryHandler}
            />
            <button>Search</button>
          </div>
        </div>
      </ContentWrapper>
    </div>
  );
};

export default HeroBanner;
